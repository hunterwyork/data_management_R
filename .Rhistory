q = c.mod$df.null - c.mod$df.residual
)
}
mods_t1 <- list("base_model",
"base_model_mac_mes",
"base_model_mic_mac_mes",
"base_mes_mac_mic_mic_imm_vars",
"base_mes_mac_mic_vars",
"base_mes_mac_mic_vars_mic_imm_vars",
"base_mes_mac_vars_mic_imm",
"base_mes_mac_vars",
"base_mes_mac_vars_mic_imm_vars",
"base_model_micro_imm",
"base_vars_imm",
"base_vars",
"base_vars_imm_vars")
# add columns for lmtest
lmr <- function(c.mod, c.mod_comp){
dat <- lmtest::lrtest(get(c.mod), get(c.mod_comp))  %>% .[2,c(3,4,5)]
return(dat)
}
out1 <- lapply(mods_t1[c(4,5,6)],c.mod_comp = "base_model_mic_mac_mes", lmr) %>% do.call(rbind, .)
out2 <- lapply(mods_t1[c(3:9)],c.mod_comp = "base_model_mac_mes", lmr)%>% do.call(rbind, .)
lapply(mods_t1, model_descr) %>% rbindlist() -> table1
out1$model <- unlist(mods_t1[c(4,5,6)])
out2$model <- unlist(mods_t1[3:9])
table1 <- merge(table1, out1, by = "model", all = T, sort = F)
table1 <- merge(table1, out2, by = "model", all = T, sort = F)
table1[, model := c("$\\:\\:$1. Base Model",
"$\\:\\:$2. $\\quad$Model 1 + Mac./Mes. Imm.",
"$\\:\\:$3. $\\quad\\quad$Model 2 + Mic. Imm.",
"$\\:\\:$4. $\\quad\\quad\\quad$Model 3 + Scaling:Mic. Imm.",
"$\\:\\:$5. $\\quad\\quad\\quad$Model 3 + Scaling",
"$\\:\\:$6. $\\quad\\quad\\quad\\quad$Model 5 + Scaling:Mic. Imm.",
"$\\:\\:$7. $\\quad\\quad$Model 2 + Scaling:Mic. Imm.",
"$\\:\\:$8. $\\quad\\quad$Model 2 + Scaling",
"$\\:\\:$9. $\\quad\\quad\\quad$Model 8 + Scaling:Mic. Imm.",
"10. $\\quad$Model 1 + Mic. Imm.",
"11. $\\quad$Model 1 + Scaling:Mic. Imm.",
"12. $\\quad$Model 1 + Scaling",
"13. $\\quad\\quad$Model 12 + Scaling:Mic. Imm.")]
#fwrite(table1, "../ref/table_1_asa.csv")
table1
vars
formula_15 <- as.formula(paste0("N ~ as.factor(occ1950) + as.factor(focc1950)  +
macro_c:as.factor(macroocc) +
micro_c:as.factor(microocc) +
meso_c:as.factor(mesoocc) +",
paste0("micro_c:",paste0(lasso_diag_vars, ":", paste0(lasso_diag_vars, "_f")), collapse = " + ")))
base_mes_mac_mic_mic_imm_vars <- glm(data = counts[sex == 1 & parent_sex == 1], formula = formula_15, family = "poisson")
table1
base_mes_mac_mic_mic_imm_vars <- glm(data = counts[sex == 1 & parent_sex == 1], formula = formula_15, family = "poisson")
formula_12 <- as.formula(paste0("N ~ as.factor(occ1950) + as.factor(focc1950)  +
micro_c:status:status_f+",
paste0("micro_c:",paste0(lasso_diag_vars, ":", paste0(lasso_diag_vars, "_f")), collapse = " + ")))
base_vars_imm <- glm(data = counts[sex == 1 & parent_sex == 1], formula = formula_12, family = "poisson")
model_descr <- function(d.mod){
c.mod <- get(d.mod)
data.table(model = d.mod,
ll = logLik(c.mod) %>% as.numeric(),
aic = AIC(c.mod),
bic = BIC(c.mod),
delta =  (sum(abs(c.mod$data$N-exp(predict((c.mod)))))/
(2*(sum(c.mod$data$N)))),
df = c.mod$df.residual,
q = c.mod$df.null - c.mod$df.residual
)
}
mods_t1 <- list("base_model",
"base_model_mac_mes",
"base_model_mic_mac_mes",
"base_mes_mac_mic_mic_imm_vars",
"base_mes_mac_mic_vars",
"base_mes_mac_mic_vars_mic_imm_vars",
"base_mes_mac_vars_mic_imm",
"base_mes_mac_vars",
"base_mes_mac_vars_mic_imm_vars",
"base_model_micro_imm",
"base_vars_imm",
"base_vars",
"base_vars_imm_vars")
# add columns for lmtest
lmr <- function(c.mod, c.mod_comp){
dat <- lmtest::lrtest(get(c.mod), get(c.mod_comp))  %>% .[2,c(3,4,5)]
return(dat)
}
out1 <- lapply(mods_t1[c(4,5,6)],c.mod_comp = "base_model_mic_mac_mes", lmr) %>% do.call(rbind, .)
out2 <- lapply(mods_t1[c(3:9)],c.mod_comp = "base_model_mac_mes", lmr)%>% do.call(rbind, .)
lapply(mods_t1, model_descr) %>% rbindlist() -> table1
out1$model <- unlist(mods_t1[c(4,5,6)])
out2$model <- unlist(mods_t1[3:9])
table1 <- merge(table1, out1, by = "model", all = T, sort = F)
table1 <- merge(table1, out2, by = "model", all = T, sort = F)
table1[, model := c("$\\:\\:$1. Base Model",
"$\\:\\:$2. $\\quad$Model 1 + Mac./Mes. Imm.",
"$\\:\\:$3. $\\quad\\quad$Model 2 + Mic. Imm.",
"$\\:\\:$4. $\\quad\\quad\\quad$Model 3 + Scaling:Mic. Imm.",
"$\\:\\:$5. $\\quad\\quad\\quad$Model 3 + Scaling",
"$\\:\\:$6. $\\quad\\quad\\quad\\quad$Model 5 + Scaling:Mic. Imm.",
"$\\:\\:$7. $\\quad\\quad$Model 2 + Scaling:Mic. Imm.",
"$\\:\\:$8. $\\quad\\quad$Model 2 + Scaling",
"$\\:\\:$9. $\\quad\\quad\\quad$Model 8 + Scaling:Mic. Imm.",
"10. $\\quad$Model 1 + Mic. Imm.",
"11. $\\quad$Model 1 + Scaling:Mic. Imm.",
"12. $\\quad$Model 1 + Scaling",
"13. $\\quad\\quad$Model 12 + Scaling:Mic. Imm.")]
lasso_diag
?ranger
library(ranger)
library(tuneranger)
library(tuneRanger)
install.packages("tuneRanger")
library(tuneRanger)
?tuneRanger
?ranger
?tuneRanger
?makeClassifTask
makeRegrTask(data = skills[,.(`abl_Arm-Hand Steadiness.LV`, `abl_Auditory Attention.LV`)], target = "abl_Arm-Hand Steadiness.LV")
makeRegrTask(data = skills[,.(status, prestige)], target = "prestige")
makeRegrTask(data = skills[,.(status, prestige)], target = "prestige") -> out
tuneRanger(out) -> out2
out2
out2 %>% str()
makeRegrTask(data = skills[,.(status, prestige, OCC1950)], target = "prestige") -> out
tuneRanger(out) -> out2
predict(out2$model, newdata = skills)
predict(out2$model, newdata = skills) %>% str()
predict(out2$model, newdata = skills) -> out2
out2$data$response
formula_11 <- as.formula(paste0("N ~ as.factor(occ1950) + as.factor(focc1950)  +
macro_c:as.factor(macroocc) +
meso_c:as.factor(mesoocc) +",
paste0("micro_c:",paste0(lasso_diag_vars, ":", paste0(lasso_diag_vars, "_f")), collapse = " + "), "+",
paste0(paste0(lasso_off_diag_vars, ":", paste0(lasso_off_diag_vars, "_f")), collapse = " + ")))
base_mes_mac_vars_mic_imm_vars <- glm(data = counts[sex == 1 & parent_sex == 1], formula = formula_11, family = "poisson")
counts[,micro_c :=  ifelse(microocc == microocc_f, 1, 0)]
knitr::opts_chunk$set(echo = F, warning = F, message = F, cache = T)
library(Rfast)
library(ggplot2)
library(dplyr)
library(magrittr)
library(stringr)
library(readxl)
library(haven)
library(data.table)
library(umap)
pc_n <- 15
n <- 10000
theme_set(theme_bw(base_size = 8, base_family = "serif"))
# load the data
#setwd("/Users/hyork/Documents/projects/occupation/code")
#saveRDS(gen, "../inputs/cps_00010.rds")
gen <- read_dta( "../inputs/pooled_data(1).dta") %>% data.table()
ed_male <- read_dta( "../inputs/pooled_edu_mobility_male.dta") %>% data.table()
ed_female <- read_dta( "../inputs/pooled_edu_mobility_female.dta") %>% data.table()
ed_male[, sex := 1]
ed_female[, sex := 2]
ed_all <- rbind(ed_male, ed_female)
# gen <-  merge(gen, ed_all[,.(newid, sex, fa_edu, mo_edu, edu,birthyear)], by = c("newid", "sex", "birthyear"))
moms <- gen[!is.na(mmicroocc)]
gen[, parent_sex := 1]
moms[, parent_sex := 2]
moms[, focc1950 := mocc1950]
moms[, fmicroocc := mmicroocc]
moms[, focc_rank := mocc_rank]
#moms[, fa_edu := mo_edu]
moms[, fbirthyear := mbirthyear]
moms[, fcohort := mcohort]
gen <- rbind(gen, moms)
#
# gen[edu %in% 0:5, edu_recode := "Less than HS"]
# gen[edu %in% 6, edu_recode := "HS"]
# gen[edu %in% 7:8, edu_recode := "Some College"]
# gen[edu %in% 10, edu_recode := "College"]
# gen[edu %in% 11, edu_recode := "Graduate"]
# gen[fa_edu %in% 0:5, fa_edu_recode := "Less than HS"]
# gen[fa_edu %in% 6, fa_edu_recode := "HS"]
# gen[fa_edu %in% 7:8, fa_edu_recode := "Some College"]
# gen[fa_edu %in% 10, fa_edu_recode := "College"]
# gen[fa_edu %in% 11, fa_edu_recode := "Graduate"]
temp <- names(gen)
# subset
gen <- gen[birthyear > 1950]
# load skills
skills <- fread("../ref/skills_final_2.csv")
alt_names <- fread("../ref/skills_xwalk.csv")
setnames(skills, paste0(alt_names$Element.Name2[paste0(alt_names$Element.Name2, ".LV") %in% names(skills)], ".LV"),
paste0(alt_names$Element.Name[paste0(alt_names$Element.Name2, ".LV") %in% names(skills)], ".LV"))
cps_codes <- skills$`CPS Code`
skills <- skills[,.SD, .SDcols = names(skills)[names(skills) %like% ".LV"]]
###
#####
#facts <-factanal(skills, 10)
# matrix(as.numeric(facts$loadings), attributes(facts$loadings)$dim, dimnames=attributes(facts$loadings)$dimnames) %>%
#   data.table() -> facts
# facts[, skill_name :=names(skills)[names(skills) %like% ".LV"] ]
# facts %>% melt(id.vars = "skill_name") %>% .[,rank := frank(abs(value)), by = variable] %>% .[rank >234]
umap.config_new <- umap.defaults %>% copy()
umap.config_new$n_components <- 2
umap_embed <- umap(t(skills), config = umap.config_new)
skills_knn <- kmeans(umap_embed$layout, centers = pc_n)
set.seed(100)
umap_embed$layout[,1:2] %>% data.frame() %>% ggplot() + geom_text(aes(x = X1, y = X2, color =skills_knn$cluster %>% as.factor() , label = names(skills)), size = 1.5)
chars <- umap_embed$layout[,1:2] %>% data.frame() %>% data.table(keep.rownames = T) %>% .[, cluster := skills_knn$cluster]
chars <- chars[order(cluster, rn)]
chars[cluster == 1, id := "Management Style"]
chars[cluster == 2, id := "Management Activites"]
chars[cluster == 3, id := "Physical Abilities-Harsh Contexts"]
chars[cluster == 4, id := "Analytical Thinking"]
chars[cluster == 5, id := "Engineering Skills"]
chars[cluster == 6, id := "Working with Others"]
chars[cluster == 7, id := "Visual/Sensory Acuity"]
chars[cluster == 8, id := "Ideational Management"]
chars[cluster == 9, id := "Caring, Service, Teaching"]
chars[cluster == 10, id := "Physical Abilities-Harsh Contexts2"]
chars[cluster == 11, id := "Intellectual/Analytical"]
chars[cluster == 12, id := "Clerical Skills"]
chars[cluster == 13, id := "Clerical Skills2"]
chars[cluster == 14, id := "Harsh Contexts"]
chars[cluster == 15, id := "Random Knowledge, Strength"]
chars[, ]
table1 <- chars[,.(paste0(rn, collapse = "; ")), by = cluster]
prcomp(skills) -> prc_arch
prc <- prc_arch$x[, 1:pc_n]
for(i in 1:pc_n){
skills[,paste0("umap_", i) := rowMeans(.SD),
.SDcols = names(skills_knn$cluster[skills_knn$cluster == i])]
}
skills <- cbind(skills, prc)
######################################
#collapse to microocc
########################################
###
cheng <- data.table(readstata13::read.dta13("../ref/occ1950_mc_xwalk_70.dta"))
cheng[, occ1950 := gsub("[^A-Za-z0-9]", "", tolower(occ1950))]
# occ50 recode
occ50_recode <- fread("../ref/occ1950_recode.csv")
occ50_recode <- occ50_recode[,1:2]
names(occ50_recode) <- unlist(occ50_recode[1, ])
occ50_recode <- occ50_recode[-1,]
occ50_recode <- occ50_recode[!is.na(as.numeric(occ1950_num))]
occ50_recode[, occ1950 := gsub("[^A-Za-z0-9]", "", tolower(occ1950))]
# merge
cheng <- merge(cheng, occ50_recode[,.(occ1950, occ1950_num)], all.x = T)
#fix the stragglers
fix <- cheng[is.na(occ1950_num)]
candidates <- occ50_recode[!occ1950 %in% cheng$occ1950]
for(c.fix in 1:nrow(fix)){
goal <- substr(fix[c.fix, occ1950],1,7)
new <- candidates[candidates$occ1950 %like% goal, occ1950_num]
if(length(new) == 1){fix[c.fix, new_occ1950_num := new]}
}
fix[is.na(new_occ1950_num), new_occ1950_num := c(43, 34, 44, 603, 16, 46, 605,94, 19,48,69,84,26,23,27,29)]
cheng <- merge(cheng, fix[,.(occ1950, new_occ1950_num)], by = "occ1950", all.x = T)
cheng[is.na(occ1950_num), occ1950_num := new_occ1950_num]
cheng[, occ1950_num := as.numeric(occ1950_num)]
cheng[, new_occ1950_num := NULL]
setnames(cheng, "occ1950_num", "OCC1950")
cheng[, occ1950 := NULL]
factorr <- function(x){ifelse(is.character(x), return(factor(x)), return(x))}
cheng[,names(cheng) := lapply(.SD, factorr), .SDcols = names(cheng)]
# xwalk skills to 1950
occ50_xwalk <- readxl::read_xlsx("../ref/Census_integrated_occ_crosswalks.xlsx") %>% data.table()
occ50_xwalk <- occ50_xwalk[,.(`OCC1950`, `ACS 2003-`)]
setnames(occ50_xwalk, c("OCC1950", "CPS Code"))
#
skills <- cbind(skills, cps_codes)
skills[, cps_codes := as.character(cps_codes)]
skills <- merge(skills, occ50_xwalk, by.x = "cps_codes", by.y = "CPS Code", all.x = T)
# create artificial constructs
skills[,verbal := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"Oral|Written"]]
skills[,quantitative := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"Math|Number"]]
skills[,analytical := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"Fluen|Probl|Deduc|Induct|Information Ord|Critical|Active Lear|Learnin|Judgin|Processin|Evaluating|Analyz"]]
skills[,creative := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"Originality|Thinking Cr|Innovation"]]
skills[,spatial_orientation := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"Control Prec|Multilimb|Response Orien|Rate Cont|Reaction T|Wrist|Limb"]]
skills[,strength := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"Static|Explosive|Dynami|Trunk|Extent F|Dynamic F|Gross B|Sensory Ab|Stamina"]]
skills[,interactive := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"Interpreting Meaning|Communicating with|Establishing and|Assisting and Car|Selling or Inf|Resolving C|Performing for"]]
skills[,supervising := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"Coordinating the Work and|Developing and B|Training and T|Guiding|Coaching|Provide Consult|Leader|Coordinate or Lead"]]
skills[,discomfort := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"Sounds and Noise|Very Hot|Extremely B|Exposed to C|Cramped W|Whole Body"]]
skills[,physical_hazards := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"High Place|Hazard|Exposed to Minor"]]
skills[,education_req := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"edu_Rel|edu_Req"]]
skills[,autonomy := rowMeans(.SD), .SDcols = names(skills)[names(skills)%like%
"vlu_Ind|sty_Inde"]]
#
skills[,lapply(.SD, mean), by = OCC1950, .SDcols = names(skills)[!names(skills) %like% "CPS|cps|OCC1950|occ1950"]] -> skills
skills[, OCC1950 := as.numeric(OCC1950)]
skills <- merge(cheng, skills, by = "OCC1950")
# create table of what goes into each thing
c("Oral|Written", "Math|Number", "Fluen|Probl|Deduc|Induct|Information Ord|Critical|Active Lear|Learnin|Judgin|Processin|Evaluating|Analyz",  "Originality|Thinking Cr|Innovation", "Control Prec|Multilimb|Response Orien|Rate Cont|Reaction T|Wrist|Limb", "Static|Explosive|Dynami|Trunk|Extent F|Dynamic F|Gross B|Sensory Ab|Stamina", "Interpreting Meaning|Communicating with|Establishing and|Assisting and Car|Selling or Inf|Resolving C|Performing for", "Coordinating the Work and|Developing and B|Training and T|Guiding|Coaching|Provide Consult|Leader|Coordinate or Lead", "Sounds and Noise|Very Hot|Extremely B|Exposed to C|Cramped W|Whole Body", "High Place|Hazard|Exposed to Minor", "edu_Rel|edu_Req",  "vlu_Ind|sty_Inde") -> chars
lapply(chars, function(x){names(skills)[names(skills)%like%x ]}) -> out
c.vars = c("Verbal", "Quantitative", "Analytical",
"Creative", "Spatial Orientation",
"Strength", "Interactive", "Supervising",
"Discomfort", "Physical Hazards", "Required Education",
"Autonomy")
out <- data.table("Constructed Variable" = c.vars, "Component Varibles" = lapply(out, function(x){paste0(x, collapse = ",\\\\ &")}) %>% unlist())
out[, `Component Varibles` := gsub(".LV", "", `Component Varibles`)]
out[, `Component Varibles` := gsub("sty_", "Style: ", `Component Varibles`)]
out[, `Component Varibles` := gsub("edu_", "Requisites: ", `Component Varibles`)]
out[, `Component Varibles` := gsub("ctx_", "Work Context: ", `Component Varibles`)]
out[, `Component Varibles` := gsub("act_", "Work Activity: ", `Component Varibles`)]
out[, `Component Varibles` := gsub("abl_", "Ability: ", `Component Varibles`)]
out[, `Component Varibles` := gsub("sty_", "Work Style: ", `Component Varibles`)]
out[, `Component Varibles` := gsub("knl_", "Knowledge: ", `Component Varibles`)]
out[, `Component Varibles` := gsub("abl_", "Ability: ", `Component Varibles`)]
out[, `Component Varibles` := gsub("vlu_", "Value: ", `Component Varibles`)]
out[, `Component Varibles` := gsub("skl_", "Skill: ", `Component Varibles`)]
fwrite(out, "../ref/constructed_vars.csv")
### add in status, etc
status <- fread("../ref/usa_00022.csv")
status <- status[,.(OCC1950, NPBOSS50, PRESGL)] %>% unique()
setnames(status, c("NPBOSS50", "PRESGL"), c("status", "prestige"))
skills <- merge(skills, status, all.x = T)
#####################################
###
#####################################
counts <- gen[,.N, by = .(focc1950,occ1950, sex, parent_sex)]
counts[, focc1950:= as.numeric(focc1950)]
counts[,occ1950:= as.numeric(occ1950)]
counts[, sex:= as.numeric(sex)]
counts[, parent_sex:= as.numeric(parent_sex)]
# expand grid for 0s
new_counts <- expand.grid(occ1950 = unique(counts$occ1950),
focc1950 = unique(counts$focc1950),
sex = 1:2,
# fa_edu_recode = unique(counts$fa_edu_recode),
#edu_recode = unique(counts$edu_recode),
parent_sex = 1:2) %>%
data.table()
counts <- merge(counts, new_counts, by = names(new_counts), all = T)
counts[is.na(N), N := 0]
counts <- counts[!occ1950 %in% c(999,997,995,595) & occ1950 < 979]
counts <- counts[!focc1950 %in% c(999,997,995,595) & focc1950 < 979]
#counts <- counts[!is.na(fa_edu_recode) & !is.na(edu_recode)]
###############################################
################## RANK #######################
# for(c.skill in names(skills)[!names(skills) %like% "micro|macro|meso"]){
#   skills[, (c.skill) := frank(get(c.skill))/100]
# }
###############################################
###############################################
#vars <- names(skills)[(!names(skills) %like% "OCC|occ|umap|LV" & !names(skills) %like% "_" & names(skills) %like% "^PC")|names(skills) %like% "status|presti"]
vars <- names(skills)[(!names(skills) %like% "OCC|occ|pc" & names(skills) %like% "_" & names(skills) %like% "LV")|names(skills) %like% "status|presti|umap"]
#vars <- names(skills)[names(skills) %like% ".LV|prestige|status|PC"]
counts <- merge(counts, skills[,.SD, .SDcols = c("OCC1950", vars,
"microocc", "mesoocc", "macroocc")], by.x = "occ1950", by.y = "OCC1950")
father_skills <- copy(skills)
setnames(father_skills, names(father_skills), paste0(names(father_skills), "_f"))
counts <- merge(counts, father_skills[,.SD, .SDcols = c("OCC1950_f", paste0(vars, "_f"),
"microocc_f", "mesoocc_f", "macroocc_f")], by.x = "focc1950", by.y = "OCC1950_f")
counts[, status := status/100]
counts[, status_f := status_f/100]
counts[, prestige := prestige/100]
counts[, prestige_f := prestige_f/100]
########### merge on gen
gen <- merge(gen, skills[,.SD, .SDcols = c("OCC1950", vars, "microocc", "mesoocc", "macroocc")], by.x = "occ1950", by.y = "OCC1950")
father_skills <- copy(skills)
setnames(father_skills, names(father_skills), paste0(names(father_skills), "_f"))
gen <- merge(gen, father_skills[,.SD, .SDcols = c("OCC1950_f", paste0(vars, "_f"),
"microocc_f", "mesoocc_f", "macroocc_f")], by.x = "focc1950", by.y = "OCC1950_f")
gen[, status := status/100]
gen[, status_f := status_f/100]
gen[, prestige := prestige/100]
gen[, prestige_f := prestige_f/100]
knitr::kable(table1, format = "latex") %>%
kableExtra::kable_styling(full_width = T)
library(ggplot2)
library(dplyr)
library(magrittr)
library(stringr)
library(readxl)
library(haven)
library(data.table)
library(umap)
vars_to_loop <- vars
for(c_var in vars_to_loop){
#  counts[, paste0(c_var, "_absdiff") := abs(get(c_var) - get(paste0(c_var, "_f")))]
counts[, paste0(c_var, "_diff") := (get(c_var) - get(paste0(c_var, "_f")))]
#  gen[, paste0(c_var, "_absdiff") := abs(get(c_var) - get(paste0(c_var, "_f")))]
gen[, paste0(c_var, "_diff") := (get(c_var) - get(paste0(c_var, "_f")))]
}
library(ggridges)
#vars <- vars[vars %like% "PC"]
######################################################
##### Regress
######################################################
counts[,micro_c :=  ifelse(microocc == microocc_f, 1, 0)]
counts[,macro_c :=  ifelse(macroocc == macroocc_f, 1, 0)]
counts[,meso_c :=  ifelse(mesoocc == mesoocc_f, 1, 0)]
counts[,occ1950_c :=  ifelse(occ1950 == focc1950, 1, 0)]
# add in status variable
counts[,micro_c :=  ifelse(microocc == microocc_f, 1, 0)]
counts[,macro_c :=  ifelse(macroocc == macroocc_f, 1, 0)]
counts[,meso_c :=  ifelse(mesoocc == mesoocc_f, 1, 0)]
counts[,occ1950_c :=  ifelse(occ1950 == focc1950, 1, 0)]
lasso_off_diag_vars <- paste0("umap_", 1:pc_n)
lasso_off_diag_vars <- c(lasso_off_diag_vars, "status", "prestige")
lasso_diag_vars <- lasso_off_diag_vars
formula_11 <- as.formula(paste0("N ~ as.factor(occ1950) + as.factor(focc1950)  +
macro_c:as.factor(macroocc) +
meso_c:as.factor(mesoocc) +",
paste0("micro_c:",paste0(lasso_diag_vars, ":", paste0(lasso_diag_vars, "_f")), collapse = " + "), "+",
paste0(paste0(lasso_off_diag_vars, ":", paste0(lasso_off_diag_vars, "_f")), collapse = " + ")))
base_mes_mac_vars_mic_imm_vars <- glm(data = counts[sex == 1 & parent_sex == 1], formula = formula_11, family = "poisson")
base_mes_mac_vars_mic_imm_vars_12 <- glm(data = counts[sex == 1 & parent_sex == 2], formula = formula_11, family = "poisson")
base_mes_mac_vars_mic_imm_vars_21 <- glm(data = counts[sex == 2 & parent_sex == 1], formula = formula_11, family = "poisson")
base_mes_mac_vars_mic_imm_vars_22 <- glm(data = counts[sex == 2 & parent_sex == 2], formula = formula_11, family = "poisson")
out <-lapply(c("base_mes_mac_vars_mic_imm_vars", "base_mes_mac_vars_mic_imm_vars_12",
"base_mes_mac_vars_mic_imm_vars_21", "base_mes_mac_vars_mic_imm_vars_22"), attenuationr)
attenuationr <- function(c.mod){
d.mod <- get(c.mod)
dt1 <- summary(d.mod)$coefficients %>% data.table(keep.rownames = T)
dt1[, model := c.mod]
return(dt1)
}
out <-lapply(c("base_mes_mac_vars_mic_imm_vars", "base_mes_mac_vars_mic_imm_vars_12",
"base_mes_mac_vars_mic_imm_vars_21", "base_mes_mac_vars_mic_imm_vars_22"), attenuationr)
dt <- rbindlist(out)
dt[model %like% "21", parent_sex := "Father"]
dt[model %like% "21", child_sex := "Daughter"]
dt[model %like% "12", parent_sex := "Mother"]
dt[model %like% "12", child_sex := "Son"]
dt[model %like% "22", parent_sex := "Mother"]
dt[model %like% "22", child_sex := "Daughter"]
dt[!model %like% "21|12|22", parent_sex := "Father"]
dt[!model %like% "21|12|22", child_sex := "Son"]
dt <- dt[!rn %like% "micro_c:as|macro_c:as|mecro_c:as|as.factor|Intercept"]
dt[, variable := tstrsplit(rn, ":", keep = 2)]
dt[, variable := gsub("_f" , "", variable)]
dt[, variable := gsub("_" , " ", variable)]
dt[, variable := sub('^(\\w?)', '\\U\\1', variable, perl=T)]
dt[rn %like% "micro_c", type := "Immobility Effects"]
dt[!rn %like% "micro_c", type := "Mobility Effects"]
dt[, upper  := Estimate + 1.96 * `Std. Error`]
dt[, lower  := Estimate - 1.96 * `Std. Error`]
dt[, significant := ifelse(`Pr(>|z|)` < .05, "Significant", "Not Significant")]
dt[variable %like% "Education req", variable := "Required Educ./Training"]
var_order <- dt[type %like% "Mobility"] %>% .[order(Estimate), variable]
dt[, `Parent/Child` := paste0(parent_sex, "/", child_sex)]
dt[, variable := factor(variable, levels = var_order)]
var_order
var_order <- dt[type %like% "Mobility" & sex == 1 & parent_sex ==1] %>% .[order(Estimate), variable]
dt
var_order <- dt[type %like% "Mobility" & sex == 1 & parent_sex ==1] %>% .[order(Estimate), variable]
var_order <- dt[type %like% "Mobility" & child_sex == "Son" & parent_sex =="Father"] %>% .[order(Estimate), variable]
var_order
dt[, `Parent/Child` := paste0(parent_sex, "/", child_sex)]
dt[, variable := factor(variable, levels = var_order)]
dt[, `Parent/Child` := factor(`Parent/Child`, levels = unique(`Parent/Child`)[c(1,3,2,4)])]
library(ggthemes)
gg <- ggplot(dt) +
geom_hline(yintercept = 0, linetype = 2, color = "gray50")+
geom_bar(aes(x = variable, y = Estimate,
shape = as.factor(significant),
group =  `Parent/Child`, fill =  `Parent/Child`), stat = "identity",
width = .5,
position = position_dodge(width = .5)) +
scale_y_continuous(trans = scales::pseudo_log_trans(),
breaks = c(-20, -10, -5, -2, 0, 2, 5, 10, 20))+
scale_fill_colorblind()+
geom_errorbar(aes(x = variable, y = Estimate, ymax = upper, ymin = lower,
group =  `Parent/Child`,
shape = as.factor(significant)), width = 0, color = "gray50" ,
position = position_dodge(width = .5)) +
facet_grid(type ~.) +
theme_bw(base_size = 10) +
#scale_y_continuous(trans = scales::pseudo_log_trans()) +
scale_shape_manual(values = c(4,1)) +
labs(x = "Variable", y = "Estimate", title = "Scaling Effects for Occupational Mobility and\nImmobility Seperately, by Sex; Model 9",
shape = "Significance") +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
gg
gg
?kable
chars
table1
names(tabel)
names(table1)
table1[, variable := paste0("Umap ", cluster)]
dt <- merge(dt, table1, by = variable)
dt
table1
stargazer::stargazer(father_res[,.SD, summary = F, header = F, font.size = "tiny", title = "Males, Number of Fathers/Sons within N Macrooccs of Each Other",
stargazer::stargazer(father_res, summary = F, header = F, font.size = "tiny", title = "Males, Number of Fathers/Sons within N Macrooccs of Each Other",
rownames = F)
stargazer::stargazer(father_res, summary = F, header = F, font.size = "tiny", title = "Males, Number of Fathers/Sons within N Macrooccs of Each Other",
stargazer::stargazer(father_res, summary = F, header = F, font.size = "tiny", title = "Males, Number of Fathers/Sons within N Macrooccs of Each Other",
rownames = F)
table1_arch
table1_arch
?xtable
#stargazer::stargazer(table1, header = F, summary = F)
xtable::xtable(table) %>%
xtable::print.xtable(., type = "latex")
chars
table1_arch
table1
table1[
]
getwd()
setwd("~/Documents/projects/archive/data_management_R")
